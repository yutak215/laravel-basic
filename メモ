

１、プロジェクトの作成方法、設定
・ターミナルから composer create-project "laravel/laravel=10.*" laravel-basic を入力
・app.php	Laravelプロジェクト全体の設定を行う。アプリケーションの名前やタイムゾーン、ロケール（後述）などを設定できる。
・Laravelのenv()ヘルパ関数を使うかどうかで編集するファイルが以下のように変わります。
  env()ヘルパ関数を使う場合：.envファイルを編集する
  env()ヘルパ関数を使わない場合：設定ファイルを直接編集する
※使い分け　タイムゾーンや場所など普遍的なものは設定ファイルを直接　環境によって異なる設定（開発環境や本番環境）をする場合はヘルパー関数のenv()を使う

2.ルーティングの設定
・Routingは日本語にすると「経路制御」という意味です。「このURLにアクセスしたときは○○コントローラの□□アクションを実行する」のように、ユーザーからのリクエストに応じてコントローラを選択する役割を担当します。
・ルーティングのファイルはroutes/web.phpです。このファイルはComposerコマンドでアプリのひな型を作成するときに自動的に作成されます。
・たとえば
Route::get('/hello', function () {
    return 'Hello, world!';
});
urlの末尾に/helloが付くとhello worldを表示するページに飛ばす、仕分けするのが仕事

・Route::get('/posts', [PostController::class, 'index']);
Routeはララベルのクラスのスタティック関数のgetメソッドを読んで
二個目の：：はクラス名

3,コントローラーの設定
・コントローラはモデルとビューを制御する役割を担当します。いわば、ユーザー、モデル、ビューの橋渡し役です。オーケストラの指揮者に例えるとイメージしやすいかもしれません（ユーザー＝観客、モデル＝演奏者、ビュー＝奏でられる曲）。
・Laravelではターミナルで以下のコマンドを実行することで、簡単にコントローラを作成できます。なお、作成されたコントローラ（コントローラ名.php）はapp/Http/Controllersフォルダの中に配置されます。
・コントローラを作成するには、ターミナルで以下のコマンドを実行します。
　php artisan make:controller コントローラ名
コマンドを実行するとコントローラーのファイルが自動生成される
そのファイル（HelloController.php)を確認すると
namespace,useと二つ見慣れないものが書いてある
・namespace（名前空間）とは
namespace（名前空間）とは一言でいえば、「クラスの住所」です。namespace ファイルのパスのように記述することで、「そのクラスがどの場所にあるか」を明示できます。
つまり、HelloController.phpファイルの3行目に記述されているnamespace App\Http\Controllers;は、「このHelloControllerクラスはApp\Http\Controllersフォルダの中にあるよ」ということを明示しています。
・use宣言とは、「このファイルではこのクラスを使います」と宣言することです。
つまり、HelloController.phpファイルの5行目に記述されているuse Illuminate\Http\Request;は、「このファイルではIlluminate\Httpフォルダの中にあるRequestクラスを使うよ」ということを宣言しています。
このようにあらかじめ宣言しておくことで、そのファイル内ではRequestと記述するだけでRequestクラスを呼び出せるようになります。
なお、RequestクラスはLaravelがあらかじめ用意してくれているクラスで、フォームから送信された内容などを取得してくれます。よって、実際にRequestクラスを使うのはstoreアクション（作成機能）やupdateアクション（更新機能）です。

４、ビューの設定
・ビューはアプリの「表示」を担当します。具体的には、コントローラから受け取ったデータを使って動的にHTMLを生成するのが主な役割です。
・ビューを新規作成するコマンドは存在しないので、resources/viewsフォルダの中に自分でファイルを作成します。その際、ファイル名は○○○.blade.phpにします。
・ファイル名の一般的なつけ方は以下のとおりです。
一覧ページ：index.blade.php
詳細ページ：show.blade.php
作成ページ：create.blade.php
編集ページ：edit.blade.php
・ビューの作成方法
ビューはresources/viewsフォルダの中に手動で作成します。ファイル名は○○○.blade.phpです。
このように、view()ヘルパ関数でビューを指定するときはresources/viewsを省略し、フォルダ名.ファイル名（.blade.phpは不要）と記述します。なお、今回表示するindex.blade.phpファイルはresources/viewsフォルダ直下に作成したので、フォルダ名は不要です。


//　流れ
// １、web.php(ルーティング)で仕分け。/helloがついたら →HelloController内のindex メソッドを起動
// ２、index メソッド（名前はindexじゃなくてもよい）で　名前の変数を作成、それをヘルパー関数viewでindex.blade.php（blade.phpを省略)を表示させる、そして第二引数で変数を渡すために使うcompact関数で$nameを渡す
// ３、inndex.blade.phpで＄nameを表示

5,エラー例外について
・エラーが発生したときに、エラーの詳細をブラウザ上に表示させる場合は　.envファイルのAPP_DEBUG=trueに、リリースするときはfalseにする
・Laravelではresources/views/errorsフォルダ内にHTTPステータスコード.blade.phpというファイルを作成することで、そのHTTPステータスコードのエラー画面をカスタマイズすることができます。
例えば、404のページを編集したいときは 404.blade.phpを作成し編集する
・Laravelのエラーハンドラ
エラーや例外が発生した場合に実行する処理を記述したクラスやメソッドなどのことを、エラーハンドラといいます。
LaravelではApp\Exceptions\Handlerクラスがエラーハンドラであり、例外発生時にログに記録する処理や、エラー画面をユーザーに表示する処理を実行しています。
つまり、これまで学習したようにエラー画面を表示できているのはこのApp\Exceptions\Handlerクラスのおかげです。
・主な目的はユーザーに何かを伝えたいとき、保険の役割、初めはゼロでもいい→その内増やす
・とはいえ、全部にエラーハンドルするのは思考停止
・よく使う場面はデーターの更新や編集のとき、DBと整合性がとれない可能せいがある


６、データベースとの連携
a.phpMyAdminでデータベースを作成
MAMP（Mac）
MAMPを開く
右上の「Start」ボタンをクリックしてサーバーを起動する
「Stop」ボタンの左にある「WebStart」ボタンをクリックしてMAMPのスタートページを開く
画面上部の「Tools」をクリックしたあと「phpMyAdmin」を選択する
「データベース」タブを開く
「データベース名」にlaravel_basicと入力し、「作成」ボタンをクリックする
b.データベースへの接続方法
Laravelプロジェクトとデータベースを接続するには.envファイルを編集し、以下のデータベース情報を設定します。
c..envを編集
d.